/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCOPReportRepository;
import com.fds.vr.business.model.VRCOPReportRepositoryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCOPReportRepository service. Represents a row in the &quot;vr_copreportrepository&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCOPReportRepositoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCOPReportRepositoryImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCOPReportRepositoryImpl
 * @see VRCOPReportRepository
 * @see VRCOPReportRepositoryModel
 * @generated
 */
@ProviderType
public class VRCOPReportRepositoryModelImpl extends BaseModelImpl<VRCOPReportRepository>
	implements VRCOPReportRepositoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vrcop report repository model instance should use the {@link VRCOPReportRepository} interface instead.
	 */
	public static final String TABLE_NAME = "vr_copreportrepository";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "applicantProfileId", Types.BIGINT },
			{ "applicantName", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "overseasManufacturerId", Types.BIGINT },
			{ "overseasManufacturerName", Types.VARCHAR },
			{ "overseasManufacturerAddress", Types.VARCHAR },
			{ "productionPlantId", Types.BIGINT },
			{ "productionPlantCode", Types.VARCHAR },
			{ "productionPlantName", Types.VARCHAR },
			{ "productionPlantAddress", Types.VARCHAR },
			{ "copReportNo", Types.VARCHAR },
			{ "copReportStatus", Types.VARCHAR },
			{ "copReportType", Types.VARCHAR },
			{ "copReportMetadata", Types.VARCHAR },
			{ "copReportSignName", Types.VARCHAR },
			{ "copReportSignTitle", Types.VARCHAR },
			{ "copReportSignPlace", Types.VARCHAR },
			{ "copReportDate", Types.TIMESTAMP },
			{ "copReportApprovedDate", Types.TIMESTAMP },
			{ "copReportExpiredDate", Types.TIMESTAMP },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("overseasManufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportMetadata", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportApprovedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportExpiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_copreportrepository (id LONG not null primary key,mtCore LONG,applicantProfileId LONG,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,overseasManufacturerId LONG,overseasManufacturerName VARCHAR(75) null,overseasManufacturerAddress VARCHAR(75) null,productionPlantId LONG,productionPlantCode VARCHAR(75) null,productionPlantName VARCHAR(75) null,productionPlantAddress VARCHAR(75) null,copReportNo VARCHAR(75) null,copReportStatus VARCHAR(75) null,copReportType VARCHAR(75) null,copReportMetadata VARCHAR(75) null,copReportSignName VARCHAR(75) null,copReportSignTitle VARCHAR(75) null,copReportSignPlace VARCHAR(75) null,copReportDate DATE null,copReportApprovedDate DATE null,copReportExpiredDate DATE null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_copreportrepository";
	public static final String ORDER_BY_JPQL = " ORDER BY vrcopReportRepository.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_copreportrepository.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final long APPLICANTPROFILEID_COLUMN_BITMASK = 1L;
	public static final long COPREPORTNO_COLUMN_BITMASK = 2L;
	public static final long COPREPORTSTATUS_COLUMN_BITMASK = 4L;
	public static final long MTCORE_COLUMN_BITMASK = 8L;
	public static final long PRODUCTIONPLANTADDRESS_COLUMN_BITMASK = 16L;
	public static final long PRODUCTIONPLANTCODE_COLUMN_BITMASK = 32L;
	public static final long PRODUCTIONPLANTNAME_COLUMN_BITMASK = 64L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCOPReportRepository"));

	public VRCOPReportRepositoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCOPReportRepository.class;
	}

	@Override
	public String getModelClassName() {
		return VRCOPReportRepository.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("applicantProfileId", getApplicantProfileId());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("overseasManufacturerId", getOverseasManufacturerId());
		attributes.put("overseasManufacturerName", getOverseasManufacturerName());
		attributes.put("overseasManufacturerAddress",
			getOverseasManufacturerAddress());
		attributes.put("productionPlantId", getProductionPlantId());
		attributes.put("productionPlantCode", getProductionPlantCode());
		attributes.put("productionPlantName", getProductionPlantName());
		attributes.put("productionPlantAddress", getProductionPlantAddress());
		attributes.put("copReportNo", getCopReportNo());
		attributes.put("copReportStatus", getCopReportStatus());
		attributes.put("copReportType", getCopReportType());
		attributes.put("copReportMetadata", getCopReportMetadata());
		attributes.put("copReportSignName", getCopReportSignName());
		attributes.put("copReportSignTitle", getCopReportSignTitle());
		attributes.put("copReportSignPlace", getCopReportSignPlace());
		attributes.put("copReportDate", getCopReportDate());
		attributes.put("copReportApprovedDate", getCopReportApprovedDate());
		attributes.put("copReportExpiredDate", getCopReportExpiredDate());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long applicantProfileId = (Long)attributes.get("applicantProfileId");

		if (applicantProfileId != null) {
			setApplicantProfileId(applicantProfileId);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		Long overseasManufacturerId = (Long)attributes.get(
				"overseasManufacturerId");

		if (overseasManufacturerId != null) {
			setOverseasManufacturerId(overseasManufacturerId);
		}

		String overseasManufacturerName = (String)attributes.get(
				"overseasManufacturerName");

		if (overseasManufacturerName != null) {
			setOverseasManufacturerName(overseasManufacturerName);
		}

		String overseasManufacturerAddress = (String)attributes.get(
				"overseasManufacturerAddress");

		if (overseasManufacturerAddress != null) {
			setOverseasManufacturerAddress(overseasManufacturerAddress);
		}

		Long productionPlantId = (Long)attributes.get("productionPlantId");

		if (productionPlantId != null) {
			setProductionPlantId(productionPlantId);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}

		String productionPlantName = (String)attributes.get(
				"productionPlantName");

		if (productionPlantName != null) {
			setProductionPlantName(productionPlantName);
		}

		String productionPlantAddress = (String)attributes.get(
				"productionPlantAddress");

		if (productionPlantAddress != null) {
			setProductionPlantAddress(productionPlantAddress);
		}

		String copReportNo = (String)attributes.get("copReportNo");

		if (copReportNo != null) {
			setCopReportNo(copReportNo);
		}

		String copReportStatus = (String)attributes.get("copReportStatus");

		if (copReportStatus != null) {
			setCopReportStatus(copReportStatus);
		}

		String copReportType = (String)attributes.get("copReportType");

		if (copReportType != null) {
			setCopReportType(copReportType);
		}

		String copReportMetadata = (String)attributes.get("copReportMetadata");

		if (copReportMetadata != null) {
			setCopReportMetadata(copReportMetadata);
		}

		String copReportSignName = (String)attributes.get("copReportSignName");

		if (copReportSignName != null) {
			setCopReportSignName(copReportSignName);
		}

		String copReportSignTitle = (String)attributes.get("copReportSignTitle");

		if (copReportSignTitle != null) {
			setCopReportSignTitle(copReportSignTitle);
		}

		String copReportSignPlace = (String)attributes.get("copReportSignPlace");

		if (copReportSignPlace != null) {
			setCopReportSignPlace(copReportSignPlace);
		}

		Date copReportDate = (Date)attributes.get("copReportDate");

		if (copReportDate != null) {
			setCopReportDate(copReportDate);
		}

		Date copReportApprovedDate = (Date)attributes.get(
				"copReportApprovedDate");

		if (copReportApprovedDate != null) {
			setCopReportApprovedDate(copReportApprovedDate);
		}

		Date copReportExpiredDate = (Date)attributes.get("copReportExpiredDate");

		if (copReportExpiredDate != null) {
			setCopReportExpiredDate(copReportExpiredDate);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getApplicantProfileId() {
		return _applicantProfileId;
	}

	@Override
	public void setApplicantProfileId(long applicantProfileId) {
		_columnBitmask |= APPLICANTPROFILEID_COLUMN_BITMASK;

		if (!_setOriginalApplicantProfileId) {
			_setOriginalApplicantProfileId = true;

			_originalApplicantProfileId = _applicantProfileId;
		}

		_applicantProfileId = applicantProfileId;
	}

	public long getOriginalApplicantProfileId() {
		return _originalApplicantProfileId;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public long getOverseasManufacturerId() {
		return _overseasManufacturerId;
	}

	@Override
	public void setOverseasManufacturerId(long overseasManufacturerId) {
		_overseasManufacturerId = overseasManufacturerId;
	}

	@Override
	public String getOverseasManufacturerName() {
		if (_overseasManufacturerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerName;
		}
	}

	@Override
	public void setOverseasManufacturerName(String overseasManufacturerName) {
		_overseasManufacturerName = overseasManufacturerName;
	}

	@Override
	public String getOverseasManufacturerAddress() {
		if (_overseasManufacturerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerAddress;
		}
	}

	@Override
	public void setOverseasManufacturerAddress(
		String overseasManufacturerAddress) {
		_overseasManufacturerAddress = overseasManufacturerAddress;
	}

	@Override
	public long getProductionPlantId() {
		return _productionPlantId;
	}

	@Override
	public void setProductionPlantId(long productionPlantId) {
		_productionPlantId = productionPlantId;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_columnBitmask |= PRODUCTIONPLANTCODE_COLUMN_BITMASK;

		if (_originalProductionPlantCode == null) {
			_originalProductionPlantCode = _productionPlantCode;
		}

		_productionPlantCode = productionPlantCode;
	}

	public String getOriginalProductionPlantCode() {
		return GetterUtil.getString(_originalProductionPlantCode);
	}

	@Override
	public String getProductionPlantName() {
		if (_productionPlantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantName;
		}
	}

	@Override
	public void setProductionPlantName(String productionPlantName) {
		_columnBitmask |= PRODUCTIONPLANTNAME_COLUMN_BITMASK;

		if (_originalProductionPlantName == null) {
			_originalProductionPlantName = _productionPlantName;
		}

		_productionPlantName = productionPlantName;
	}

	public String getOriginalProductionPlantName() {
		return GetterUtil.getString(_originalProductionPlantName);
	}

	@Override
	public String getProductionPlantAddress() {
		if (_productionPlantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantAddress;
		}
	}

	@Override
	public void setProductionPlantAddress(String productionPlantAddress) {
		_columnBitmask |= PRODUCTIONPLANTADDRESS_COLUMN_BITMASK;

		if (_originalProductionPlantAddress == null) {
			_originalProductionPlantAddress = _productionPlantAddress;
		}

		_productionPlantAddress = productionPlantAddress;
	}

	public String getOriginalProductionPlantAddress() {
		return GetterUtil.getString(_originalProductionPlantAddress);
	}

	@Override
	public String getCopReportNo() {
		if (_copReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportNo;
		}
	}

	@Override
	public void setCopReportNo(String copReportNo) {
		_columnBitmask |= COPREPORTNO_COLUMN_BITMASK;

		if (_originalCopReportNo == null) {
			_originalCopReportNo = _copReportNo;
		}

		_copReportNo = copReportNo;
	}

	public String getOriginalCopReportNo() {
		return GetterUtil.getString(_originalCopReportNo);
	}

	@Override
	public String getCopReportStatus() {
		if (_copReportStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportStatus;
		}
	}

	@Override
	public void setCopReportStatus(String copReportStatus) {
		_columnBitmask |= COPREPORTSTATUS_COLUMN_BITMASK;

		if (_originalCopReportStatus == null) {
			_originalCopReportStatus = _copReportStatus;
		}

		_copReportStatus = copReportStatus;
	}

	public String getOriginalCopReportStatus() {
		return GetterUtil.getString(_originalCopReportStatus);
	}

	@Override
	public String getCopReportType() {
		if (_copReportType == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportType;
		}
	}

	@Override
	public void setCopReportType(String copReportType) {
		_copReportType = copReportType;
	}

	@Override
	public String getCopReportMetadata() {
		if (_copReportMetadata == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportMetadata;
		}
	}

	@Override
	public void setCopReportMetadata(String copReportMetadata) {
		_copReportMetadata = copReportMetadata;
	}

	@Override
	public String getCopReportSignName() {
		if (_copReportSignName == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignName;
		}
	}

	@Override
	public void setCopReportSignName(String copReportSignName) {
		_copReportSignName = copReportSignName;
	}

	@Override
	public String getCopReportSignTitle() {
		if (_copReportSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignTitle;
		}
	}

	@Override
	public void setCopReportSignTitle(String copReportSignTitle) {
		_copReportSignTitle = copReportSignTitle;
	}

	@Override
	public String getCopReportSignPlace() {
		if (_copReportSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignPlace;
		}
	}

	@Override
	public void setCopReportSignPlace(String copReportSignPlace) {
		_copReportSignPlace = copReportSignPlace;
	}

	@Override
	public Date getCopReportDate() {
		return _copReportDate;
	}

	@Override
	public void setCopReportDate(Date copReportDate) {
		_copReportDate = copReportDate;
	}

	@Override
	public Date getCopReportApprovedDate() {
		return _copReportApprovedDate;
	}

	@Override
	public void setCopReportApprovedDate(Date copReportApprovedDate) {
		_copReportApprovedDate = copReportApprovedDate;
	}

	@Override
	public Date getCopReportExpiredDate() {
		return _copReportExpiredDate;
	}

	@Override
	public void setCopReportExpiredDate(Date copReportExpiredDate) {
		_copReportExpiredDate = copReportExpiredDate;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCOPReportRepository.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCOPReportRepository toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCOPReportRepository)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCOPReportRepositoryImpl vrcopReportRepositoryImpl = new VRCOPReportRepositoryImpl();

		vrcopReportRepositoryImpl.setId(getId());
		vrcopReportRepositoryImpl.setMtCore(getMtCore());
		vrcopReportRepositoryImpl.setApplicantProfileId(getApplicantProfileId());
		vrcopReportRepositoryImpl.setApplicantName(getApplicantName());
		vrcopReportRepositoryImpl.setApplicantAddress(getApplicantAddress());
		vrcopReportRepositoryImpl.setOverseasManufacturerId(getOverseasManufacturerId());
		vrcopReportRepositoryImpl.setOverseasManufacturerName(getOverseasManufacturerName());
		vrcopReportRepositoryImpl.setOverseasManufacturerAddress(getOverseasManufacturerAddress());
		vrcopReportRepositoryImpl.setProductionPlantId(getProductionPlantId());
		vrcopReportRepositoryImpl.setProductionPlantCode(getProductionPlantCode());
		vrcopReportRepositoryImpl.setProductionPlantName(getProductionPlantName());
		vrcopReportRepositoryImpl.setProductionPlantAddress(getProductionPlantAddress());
		vrcopReportRepositoryImpl.setCopReportNo(getCopReportNo());
		vrcopReportRepositoryImpl.setCopReportStatus(getCopReportStatus());
		vrcopReportRepositoryImpl.setCopReportType(getCopReportType());
		vrcopReportRepositoryImpl.setCopReportMetadata(getCopReportMetadata());
		vrcopReportRepositoryImpl.setCopReportSignName(getCopReportSignName());
		vrcopReportRepositoryImpl.setCopReportSignTitle(getCopReportSignTitle());
		vrcopReportRepositoryImpl.setCopReportSignPlace(getCopReportSignPlace());
		vrcopReportRepositoryImpl.setCopReportDate(getCopReportDate());
		vrcopReportRepositoryImpl.setCopReportApprovedDate(getCopReportApprovedDate());
		vrcopReportRepositoryImpl.setCopReportExpiredDate(getCopReportExpiredDate());
		vrcopReportRepositoryImpl.setModifyDate(getModifyDate());
		vrcopReportRepositoryImpl.setSyncDate(getSyncDate());

		vrcopReportRepositoryImpl.resetOriginalValues();

		return vrcopReportRepositoryImpl;
	}

	@Override
	public int compareTo(VRCOPReportRepository vrcopReportRepository) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrcopReportRepository.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCOPReportRepository)) {
			return false;
		}

		VRCOPReportRepository vrcopReportRepository = (VRCOPReportRepository)obj;

		long primaryKey = vrcopReportRepository.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRCOPReportRepositoryModelImpl vrcopReportRepositoryModelImpl = this;

		vrcopReportRepositoryModelImpl._originalMtCore = vrcopReportRepositoryModelImpl._mtCore;

		vrcopReportRepositoryModelImpl._setOriginalMtCore = false;

		vrcopReportRepositoryModelImpl._originalApplicantProfileId = vrcopReportRepositoryModelImpl._applicantProfileId;

		vrcopReportRepositoryModelImpl._setOriginalApplicantProfileId = false;

		vrcopReportRepositoryModelImpl._originalProductionPlantCode = vrcopReportRepositoryModelImpl._productionPlantCode;

		vrcopReportRepositoryModelImpl._originalProductionPlantName = vrcopReportRepositoryModelImpl._productionPlantName;

		vrcopReportRepositoryModelImpl._originalProductionPlantAddress = vrcopReportRepositoryModelImpl._productionPlantAddress;

		vrcopReportRepositoryModelImpl._originalCopReportNo = vrcopReportRepositoryModelImpl._copReportNo;

		vrcopReportRepositoryModelImpl._originalCopReportStatus = vrcopReportRepositoryModelImpl._copReportStatus;

		vrcopReportRepositoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRCOPReportRepository> toCacheModel() {
		VRCOPReportRepositoryCacheModel vrcopReportRepositoryCacheModel = new VRCOPReportRepositoryCacheModel();

		vrcopReportRepositoryCacheModel.id = getId();

		vrcopReportRepositoryCacheModel.mtCore = getMtCore();

		vrcopReportRepositoryCacheModel.applicantProfileId = getApplicantProfileId();

		vrcopReportRepositoryCacheModel.applicantName = getApplicantName();

		String applicantName = vrcopReportRepositoryCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantName = null;
		}

		vrcopReportRepositoryCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrcopReportRepositoryCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantAddress = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerId = getOverseasManufacturerId();

		vrcopReportRepositoryCacheModel.overseasManufacturerName = getOverseasManufacturerName();

		String overseasManufacturerName = vrcopReportRepositoryCacheModel.overseasManufacturerName;

		if ((overseasManufacturerName != null) &&
				(overseasManufacturerName.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerName = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerAddress = getOverseasManufacturerAddress();

		String overseasManufacturerAddress = vrcopReportRepositoryCacheModel.overseasManufacturerAddress;

		if ((overseasManufacturerAddress != null) &&
				(overseasManufacturerAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerAddress = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantId = getProductionPlantId();

		vrcopReportRepositoryCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrcopReportRepositoryCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantCode = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantName = getProductionPlantName();

		String productionPlantName = vrcopReportRepositoryCacheModel.productionPlantName;

		if ((productionPlantName != null) &&
				(productionPlantName.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantName = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantAddress = getProductionPlantAddress();

		String productionPlantAddress = vrcopReportRepositoryCacheModel.productionPlantAddress;

		if ((productionPlantAddress != null) &&
				(productionPlantAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantAddress = null;
		}

		vrcopReportRepositoryCacheModel.copReportNo = getCopReportNo();

		String copReportNo = vrcopReportRepositoryCacheModel.copReportNo;

		if ((copReportNo != null) && (copReportNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportNo = null;
		}

		vrcopReportRepositoryCacheModel.copReportStatus = getCopReportStatus();

		String copReportStatus = vrcopReportRepositoryCacheModel.copReportStatus;

		if ((copReportStatus != null) && (copReportStatus.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportStatus = null;
		}

		vrcopReportRepositoryCacheModel.copReportType = getCopReportType();

		String copReportType = vrcopReportRepositoryCacheModel.copReportType;

		if ((copReportType != null) && (copReportType.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportType = null;
		}

		vrcopReportRepositoryCacheModel.copReportMetadata = getCopReportMetadata();

		String copReportMetadata = vrcopReportRepositoryCacheModel.copReportMetadata;

		if ((copReportMetadata != null) && (copReportMetadata.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportMetadata = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignName = getCopReportSignName();

		String copReportSignName = vrcopReportRepositoryCacheModel.copReportSignName;

		if ((copReportSignName != null) && (copReportSignName.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignName = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignTitle = getCopReportSignTitle();

		String copReportSignTitle = vrcopReportRepositoryCacheModel.copReportSignTitle;

		if ((copReportSignTitle != null) && (copReportSignTitle.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignTitle = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignPlace = getCopReportSignPlace();

		String copReportSignPlace = vrcopReportRepositoryCacheModel.copReportSignPlace;

		if ((copReportSignPlace != null) && (copReportSignPlace.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignPlace = null;
		}

		Date copReportDate = getCopReportDate();

		if (copReportDate != null) {
			vrcopReportRepositoryCacheModel.copReportDate = copReportDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportDate = Long.MIN_VALUE;
		}

		Date copReportApprovedDate = getCopReportApprovedDate();

		if (copReportApprovedDate != null) {
			vrcopReportRepositoryCacheModel.copReportApprovedDate = copReportApprovedDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportApprovedDate = Long.MIN_VALUE;
		}

		Date copReportExpiredDate = getCopReportExpiredDate();

		if (copReportExpiredDate != null) {
			vrcopReportRepositoryCacheModel.copReportExpiredDate = copReportExpiredDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportExpiredDate = Long.MIN_VALUE;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrcopReportRepositoryCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrcopReportRepositoryCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrcopReportRepositoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", applicantProfileId=");
		sb.append(getApplicantProfileId());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", overseasManufacturerId=");
		sb.append(getOverseasManufacturerId());
		sb.append(", overseasManufacturerName=");
		sb.append(getOverseasManufacturerName());
		sb.append(", overseasManufacturerAddress=");
		sb.append(getOverseasManufacturerAddress());
		sb.append(", productionPlantId=");
		sb.append(getProductionPlantId());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append(", productionPlantName=");
		sb.append(getProductionPlantName());
		sb.append(", productionPlantAddress=");
		sb.append(getProductionPlantAddress());
		sb.append(", copReportNo=");
		sb.append(getCopReportNo());
		sb.append(", copReportStatus=");
		sb.append(getCopReportStatus());
		sb.append(", copReportType=");
		sb.append(getCopReportType());
		sb.append(", copReportMetadata=");
		sb.append(getCopReportMetadata());
		sb.append(", copReportSignName=");
		sb.append(getCopReportSignName());
		sb.append(", copReportSignTitle=");
		sb.append(getCopReportSignTitle());
		sb.append(", copReportSignPlace=");
		sb.append(getCopReportSignPlace());
		sb.append(", copReportDate=");
		sb.append(getCopReportDate());
		sb.append(", copReportApprovedDate=");
		sb.append(getCopReportApprovedDate());
		sb.append(", copReportExpiredDate=");
		sb.append(getCopReportExpiredDate());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCOPReportRepository");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantProfileId</column-name><column-value><![CDATA[");
		sb.append(getApplicantProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerId</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerName</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerAddress</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantName</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantAddress</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportStatus</column-name><column-value><![CDATA[");
		sb.append(getCopReportStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportType</column-name><column-value><![CDATA[");
		sb.append(getCopReportType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportMetadata</column-name><column-value><![CDATA[");
		sb.append(getCopReportMetadata());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignName</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignTitle</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignPlace</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportApprovedDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportExpiredDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCOPReportRepository.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCOPReportRepository.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _applicantProfileId;
	private long _originalApplicantProfileId;
	private boolean _setOriginalApplicantProfileId;
	private String _applicantName;
	private String _applicantAddress;
	private long _overseasManufacturerId;
	private String _overseasManufacturerName;
	private String _overseasManufacturerAddress;
	private long _productionPlantId;
	private String _productionPlantCode;
	private String _originalProductionPlantCode;
	private String _productionPlantName;
	private String _originalProductionPlantName;
	private String _productionPlantAddress;
	private String _originalProductionPlantAddress;
	private String _copReportNo;
	private String _originalCopReportNo;
	private String _copReportStatus;
	private String _originalCopReportStatus;
	private String _copReportType;
	private String _copReportMetadata;
	private String _copReportSignName;
	private String _copReportSignTitle;
	private String _copReportSignPlace;
	private Date _copReportDate;
	private Date _copReportApprovedDate;
	private Date _copReportExpiredDate;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRCOPReportRepository _escapedModel;
}