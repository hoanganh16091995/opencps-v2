/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRIssue;
import com.fds.vr.business.model.VRIssueModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRIssue service. Represents a row in the &quot;vr_issue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRIssueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRIssueImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRIssueImpl
 * @see VRIssue
 * @see VRIssueModel
 * @generated
 */
@ProviderType
public class VRIssueModelImpl extends BaseModelImpl<VRIssue>
	implements VRIssueModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr issue model instance should use the {@link VRIssue} interface instead.
	 */
	public static final String TABLE_NAME = "vr_issue";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "stampIssueNo", Types.VARCHAR },
			{ "appliedDate", Types.TIMESTAMP },
			{ "approvedDate", Types.TIMESTAMP },
			{ "vehicleClass", Types.VARCHAR },
			{ "applicantProfileId", Types.BIGINT },
			{ "applicantName", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "applicantRepresentative", Types.VARCHAR },
			{ "applicantRepresentativeTitle", Types.VARCHAR },
			{ "applicantEmail", Types.VARCHAR },
			{ "applicantPhone", Types.VARCHAR },
			{ "applicantFax", Types.VARCHAR },
			{ "applicantContactName", Types.VARCHAR },
			{ "applicantContactEmail", Types.VARCHAR },
			{ "applicantContactPhone", Types.VARCHAR },
			{ "productionPlantId", Types.BIGINT },
			{ "productionPlantCode", Types.VARCHAR },
			{ "productionPlantName", Types.VARCHAR },
			{ "productionPlantAddress", Types.VARCHAR },
			{ "remarks", Types.VARCHAR },
			{ "methodOfIssue", Types.VARCHAR },
			{ "totalInDocument", Types.BIGINT },
			{ "issueCorporationId", Types.VARCHAR },
			{ "verifyCorporationId", Types.VARCHAR },
			{ "digitalissuestatus", Types.VARCHAR },
			{ "issueType", Types.VARCHAR },
			{ "averageSTBQuantity", Types.INTEGER },
			{ "maxMonthQuantity", Types.INTEGER },
			{ "averageSTMQuantity", Types.INTEGER },
			{ "accumulatedMonthQuantity", Types.INTEGER },
			{ "totalInUse", Types.INTEGER },
			{ "totalCancelled", Types.INTEGER },
			{ "totalLost", Types.INTEGER },
			{ "totalNotUsed", Types.INTEGER },
			{ "totalReturned", Types.INTEGER },
			{ "flow", Types.VARCHAR },
			{ "examinationRequired", Types.VARCHAR },
			{ "examinationPeriod", Types.VARCHAR },
			{ "examinationLastTime", Types.TIMESTAMP },
			{ "copresult", Types.VARCHAR },
			{ "copreportno", Types.VARCHAR },
			{ "copreportdate", Types.TIMESTAMP },
			{ "postreview", Types.VARCHAR },
			{ "postreviewrecordno", Types.VARCHAR },
			{ "postreviewrecorddate", Types.TIMESTAMP },
			{ "corporationId", Types.VARCHAR },
			{ "inspectorcode", Types.VARCHAR },
			{ "inspectorname", Types.VARCHAR },
			{ "leadername", Types.VARCHAR },
			{ "applicantmaker", Types.VARCHAR },
			{ "applicantchecker", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stampIssueNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appliedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("vehicleClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContactPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("methodOfIssue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalInDocument", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issueCorporationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verifyCorporationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("digitalissuestatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("averageSTBQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxMonthQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("averageSTMQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("accumulatedMonthQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalInUse", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalCancelled", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalLost", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalNotUsed", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalReturned", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("flow", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("examinationRequired", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("examinationPeriod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("examinationLastTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copresult", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copreportno", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copreportdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("postreview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postreviewrecordno", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postreviewrecorddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("corporationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectorname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leadername", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantmaker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantchecker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_issue (id LONG not null primary key,mtCore LONG,dossierId LONG,stampIssueNo VARCHAR(75) null,appliedDate DATE null,approvedDate DATE null,vehicleClass VARCHAR(75) null,applicantProfileId LONG,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,applicantRepresentative VARCHAR(75) null,applicantRepresentativeTitle VARCHAR(75) null,applicantEmail VARCHAR(75) null,applicantPhone VARCHAR(75) null,applicantFax VARCHAR(75) null,applicantContactName VARCHAR(75) null,applicantContactEmail VARCHAR(75) null,applicantContactPhone VARCHAR(75) null,productionPlantId LONG,productionPlantCode VARCHAR(75) null,productionPlantName VARCHAR(75) null,productionPlantAddress VARCHAR(75) null,remarks VARCHAR(75) null,methodOfIssue VARCHAR(75) null,totalInDocument LONG,issueCorporationId VARCHAR(75) null,verifyCorporationId VARCHAR(75) null,digitalissuestatus VARCHAR(75) null,issueType VARCHAR(75) null,averageSTBQuantity INTEGER,maxMonthQuantity INTEGER,averageSTMQuantity INTEGER,accumulatedMonthQuantity INTEGER,totalInUse INTEGER,totalCancelled INTEGER,totalLost INTEGER,totalNotUsed INTEGER,totalReturned INTEGER,flow VARCHAR(75) null,examinationRequired VARCHAR(75) null,examinationPeriod VARCHAR(75) null,examinationLastTime DATE null,copresult VARCHAR(75) null,copreportno VARCHAR(75) null,copreportdate DATE null,postreview VARCHAR(75) null,postreviewrecordno VARCHAR(75) null,postreviewrecorddate DATE null,corporationId VARCHAR(75) null,inspectorcode VARCHAR(75) null,inspectorname VARCHAR(75) null,leadername VARCHAR(75) null,applicantmaker VARCHAR(75) null,applicantchecker VARCHAR(75) null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_issue";
	public static final String ORDER_BY_JPQL = " ORDER BY vrIssue.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_issue.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRIssue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRIssue"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRIssue"),
			true);
	public static final long APPLICANTPROFILEID_COLUMN_BITMASK = 1L;
	public static final long COPREPORTNO_COLUMN_BITMASK = 2L;
	public static final long CORPORATIONID_COLUMN_BITMASK = 4L;
	public static final long DOSSIERID_COLUMN_BITMASK = 8L;
	public static final long ISSUECORPORATIONID_COLUMN_BITMASK = 16L;
	public static final long MTCORE_COLUMN_BITMASK = 32L;
	public static final long PRODUCTIONPLANTID_COLUMN_BITMASK = 64L;
	public static final long STAMPISSUENO_COLUMN_BITMASK = 128L;
	public static final long VERIFYCORPORATIONID_COLUMN_BITMASK = 256L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 512L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRIssue"));

	public VRIssueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRIssue.class;
	}

	@Override
	public String getModelClassName() {
		return VRIssue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("dossierId", getDossierId());
		attributes.put("stampIssueNo", getStampIssueNo());
		attributes.put("appliedDate", getAppliedDate());
		attributes.put("approvedDate", getApprovedDate());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("applicantProfileId", getApplicantProfileId());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("applicantRepresentative", getApplicantRepresentative());
		attributes.put("applicantRepresentativeTitle",
			getApplicantRepresentativeTitle());
		attributes.put("applicantEmail", getApplicantEmail());
		attributes.put("applicantPhone", getApplicantPhone());
		attributes.put("applicantFax", getApplicantFax());
		attributes.put("applicantContactName", getApplicantContactName());
		attributes.put("applicantContactEmail", getApplicantContactEmail());
		attributes.put("applicantContactPhone", getApplicantContactPhone());
		attributes.put("productionPlantId", getProductionPlantId());
		attributes.put("productionPlantCode", getProductionPlantCode());
		attributes.put("productionPlantName", getProductionPlantName());
		attributes.put("productionPlantAddress", getProductionPlantAddress());
		attributes.put("remarks", getRemarks());
		attributes.put("methodOfIssue", getMethodOfIssue());
		attributes.put("totalInDocument", getTotalInDocument());
		attributes.put("issueCorporationId", getIssueCorporationId());
		attributes.put("verifyCorporationId", getVerifyCorporationId());
		attributes.put("digitalissuestatus", getDigitalissuestatus());
		attributes.put("issueType", getIssueType());
		attributes.put("averageSTBQuantity", getAverageSTBQuantity());
		attributes.put("maxMonthQuantity", getMaxMonthQuantity());
		attributes.put("averageSTMQuantity", getAverageSTMQuantity());
		attributes.put("accumulatedMonthQuantity", getAccumulatedMonthQuantity());
		attributes.put("totalInUse", getTotalInUse());
		attributes.put("totalCancelled", getTotalCancelled());
		attributes.put("totalLost", getTotalLost());
		attributes.put("totalNotUsed", getTotalNotUsed());
		attributes.put("totalReturned", getTotalReturned());
		attributes.put("flow", getFlow());
		attributes.put("examinationRequired", getExaminationRequired());
		attributes.put("examinationPeriod", getExaminationPeriod());
		attributes.put("examinationLastTime", getExaminationLastTime());
		attributes.put("copresult", getCopresult());
		attributes.put("copreportno", getCopreportno());
		attributes.put("copreportdate", getCopreportdate());
		attributes.put("postreview", getPostreview());
		attributes.put("postreviewrecordno", getPostreviewrecordno());
		attributes.put("postreviewrecorddate", getPostreviewrecorddate());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorcode", getInspectorcode());
		attributes.put("inspectorname", getInspectorname());
		attributes.put("leadername", getLeadername());
		attributes.put("applicantmaker", getApplicantmaker());
		attributes.put("applicantchecker", getApplicantchecker());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String stampIssueNo = (String)attributes.get("stampIssueNo");

		if (stampIssueNo != null) {
			setStampIssueNo(stampIssueNo);
		}

		Date appliedDate = (Date)attributes.get("appliedDate");

		if (appliedDate != null) {
			setAppliedDate(appliedDate);
		}

		Date approvedDate = (Date)attributes.get("approvedDate");

		if (approvedDate != null) {
			setApprovedDate(approvedDate);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		Long applicantProfileId = (Long)attributes.get("applicantProfileId");

		if (applicantProfileId != null) {
			setApplicantProfileId(applicantProfileId);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		String applicantRepresentative = (String)attributes.get(
				"applicantRepresentative");

		if (applicantRepresentative != null) {
			setApplicantRepresentative(applicantRepresentative);
		}

		String applicantRepresentativeTitle = (String)attributes.get(
				"applicantRepresentativeTitle");

		if (applicantRepresentativeTitle != null) {
			setApplicantRepresentativeTitle(applicantRepresentativeTitle);
		}

		String applicantEmail = (String)attributes.get("applicantEmail");

		if (applicantEmail != null) {
			setApplicantEmail(applicantEmail);
		}

		String applicantPhone = (String)attributes.get("applicantPhone");

		if (applicantPhone != null) {
			setApplicantPhone(applicantPhone);
		}

		String applicantFax = (String)attributes.get("applicantFax");

		if (applicantFax != null) {
			setApplicantFax(applicantFax);
		}

		String applicantContactName = (String)attributes.get(
				"applicantContactName");

		if (applicantContactName != null) {
			setApplicantContactName(applicantContactName);
		}

		String applicantContactEmail = (String)attributes.get(
				"applicantContactEmail");

		if (applicantContactEmail != null) {
			setApplicantContactEmail(applicantContactEmail);
		}

		String applicantContactPhone = (String)attributes.get(
				"applicantContactPhone");

		if (applicantContactPhone != null) {
			setApplicantContactPhone(applicantContactPhone);
		}

		Long productionPlantId = (Long)attributes.get("productionPlantId");

		if (productionPlantId != null) {
			setProductionPlantId(productionPlantId);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}

		String productionPlantName = (String)attributes.get(
				"productionPlantName");

		if (productionPlantName != null) {
			setProductionPlantName(productionPlantName);
		}

		String productionPlantAddress = (String)attributes.get(
				"productionPlantAddress");

		if (productionPlantAddress != null) {
			setProductionPlantAddress(productionPlantAddress);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String methodOfIssue = (String)attributes.get("methodOfIssue");

		if (methodOfIssue != null) {
			setMethodOfIssue(methodOfIssue);
		}

		Long totalInDocument = (Long)attributes.get("totalInDocument");

		if (totalInDocument != null) {
			setTotalInDocument(totalInDocument);
		}

		String issueCorporationId = (String)attributes.get("issueCorporationId");

		if (issueCorporationId != null) {
			setIssueCorporationId(issueCorporationId);
		}

		String verifyCorporationId = (String)attributes.get(
				"verifyCorporationId");

		if (verifyCorporationId != null) {
			setVerifyCorporationId(verifyCorporationId);
		}

		String digitalissuestatus = (String)attributes.get("digitalissuestatus");

		if (digitalissuestatus != null) {
			setDigitalissuestatus(digitalissuestatus);
		}

		String issueType = (String)attributes.get("issueType");

		if (issueType != null) {
			setIssueType(issueType);
		}

		Integer averageSTBQuantity = (Integer)attributes.get(
				"averageSTBQuantity");

		if (averageSTBQuantity != null) {
			setAverageSTBQuantity(averageSTBQuantity);
		}

		Integer maxMonthQuantity = (Integer)attributes.get("maxMonthQuantity");

		if (maxMonthQuantity != null) {
			setMaxMonthQuantity(maxMonthQuantity);
		}

		Integer averageSTMQuantity = (Integer)attributes.get(
				"averageSTMQuantity");

		if (averageSTMQuantity != null) {
			setAverageSTMQuantity(averageSTMQuantity);
		}

		Integer accumulatedMonthQuantity = (Integer)attributes.get(
				"accumulatedMonthQuantity");

		if (accumulatedMonthQuantity != null) {
			setAccumulatedMonthQuantity(accumulatedMonthQuantity);
		}

		Integer totalInUse = (Integer)attributes.get("totalInUse");

		if (totalInUse != null) {
			setTotalInUse(totalInUse);
		}

		Integer totalCancelled = (Integer)attributes.get("totalCancelled");

		if (totalCancelled != null) {
			setTotalCancelled(totalCancelled);
		}

		Integer totalLost = (Integer)attributes.get("totalLost");

		if (totalLost != null) {
			setTotalLost(totalLost);
		}

		Integer totalNotUsed = (Integer)attributes.get("totalNotUsed");

		if (totalNotUsed != null) {
			setTotalNotUsed(totalNotUsed);
		}

		Integer totalReturned = (Integer)attributes.get("totalReturned");

		if (totalReturned != null) {
			setTotalReturned(totalReturned);
		}

		String flow = (String)attributes.get("flow");

		if (flow != null) {
			setFlow(flow);
		}

		String examinationRequired = (String)attributes.get(
				"examinationRequired");

		if (examinationRequired != null) {
			setExaminationRequired(examinationRequired);
		}

		String examinationPeriod = (String)attributes.get("examinationPeriod");

		if (examinationPeriod != null) {
			setExaminationPeriod(examinationPeriod);
		}

		Date examinationLastTime = (Date)attributes.get("examinationLastTime");

		if (examinationLastTime != null) {
			setExaminationLastTime(examinationLastTime);
		}

		String copresult = (String)attributes.get("copresult");

		if (copresult != null) {
			setCopresult(copresult);
		}

		String copreportno = (String)attributes.get("copreportno");

		if (copreportno != null) {
			setCopreportno(copreportno);
		}

		Date copreportdate = (Date)attributes.get("copreportdate");

		if (copreportdate != null) {
			setCopreportdate(copreportdate);
		}

		String postreview = (String)attributes.get("postreview");

		if (postreview != null) {
			setPostreview(postreview);
		}

		String postreviewrecordno = (String)attributes.get("postreviewrecordno");

		if (postreviewrecordno != null) {
			setPostreviewrecordno(postreviewrecordno);
		}

		Date postreviewrecorddate = (Date)attributes.get("postreviewrecorddate");

		if (postreviewrecorddate != null) {
			setPostreviewrecorddate(postreviewrecorddate);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		String inspectorcode = (String)attributes.get("inspectorcode");

		if (inspectorcode != null) {
			setInspectorcode(inspectorcode);
		}

		String inspectorname = (String)attributes.get("inspectorname");

		if (inspectorname != null) {
			setInspectorname(inspectorname);
		}

		String leadername = (String)attributes.get("leadername");

		if (leadername != null) {
			setLeadername(leadername);
		}

		String applicantmaker = (String)attributes.get("applicantmaker");

		if (applicantmaker != null) {
			setApplicantmaker(applicantmaker);
		}

		String applicantchecker = (String)attributes.get("applicantchecker");

		if (applicantchecker != null) {
			setApplicantchecker(applicantchecker);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getStampIssueNo() {
		if (_stampIssueNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _stampIssueNo;
		}
	}

	@Override
	public void setStampIssueNo(String stampIssueNo) {
		_columnBitmask |= STAMPISSUENO_COLUMN_BITMASK;

		if (_originalStampIssueNo == null) {
			_originalStampIssueNo = _stampIssueNo;
		}

		_stampIssueNo = stampIssueNo;
	}

	public String getOriginalStampIssueNo() {
		return GetterUtil.getString(_originalStampIssueNo);
	}

	@Override
	public Date getAppliedDate() {
		return _appliedDate;
	}

	@Override
	public void setAppliedDate(Date appliedDate) {
		_appliedDate = appliedDate;
	}

	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_vehicleClass = vehicleClass;
	}

	@Override
	public long getApplicantProfileId() {
		return _applicantProfileId;
	}

	@Override
	public void setApplicantProfileId(long applicantProfileId) {
		_columnBitmask |= APPLICANTPROFILEID_COLUMN_BITMASK;

		if (!_setOriginalApplicantProfileId) {
			_setOriginalApplicantProfileId = true;

			_originalApplicantProfileId = _applicantProfileId;
		}

		_applicantProfileId = applicantProfileId;
	}

	public long getOriginalApplicantProfileId() {
		return _originalApplicantProfileId;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public String getApplicantRepresentative() {
		if (_applicantRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentative;
		}
	}

	@Override
	public void setApplicantRepresentative(String applicantRepresentative) {
		_applicantRepresentative = applicantRepresentative;
	}

	@Override
	public String getApplicantRepresentativeTitle() {
		if (_applicantRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentativeTitle;
		}
	}

	@Override
	public void setApplicantRepresentativeTitle(
		String applicantRepresentativeTitle) {
		_applicantRepresentativeTitle = applicantRepresentativeTitle;
	}

	@Override
	public String getApplicantEmail() {
		if (_applicantEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantEmail;
		}
	}

	@Override
	public void setApplicantEmail(String applicantEmail) {
		_applicantEmail = applicantEmail;
	}

	@Override
	public String getApplicantPhone() {
		if (_applicantPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantPhone;
		}
	}

	@Override
	public void setApplicantPhone(String applicantPhone) {
		_applicantPhone = applicantPhone;
	}

	@Override
	public String getApplicantFax() {
		if (_applicantFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantFax;
		}
	}

	@Override
	public void setApplicantFax(String applicantFax) {
		_applicantFax = applicantFax;
	}

	@Override
	public String getApplicantContactName() {
		if (_applicantContactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactName;
		}
	}

	@Override
	public void setApplicantContactName(String applicantContactName) {
		_applicantContactName = applicantContactName;
	}

	@Override
	public String getApplicantContactEmail() {
		if (_applicantContactEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactEmail;
		}
	}

	@Override
	public void setApplicantContactEmail(String applicantContactEmail) {
		_applicantContactEmail = applicantContactEmail;
	}

	@Override
	public String getApplicantContactPhone() {
		if (_applicantContactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactPhone;
		}
	}

	@Override
	public void setApplicantContactPhone(String applicantContactPhone) {
		_applicantContactPhone = applicantContactPhone;
	}

	@Override
	public long getProductionPlantId() {
		return _productionPlantId;
	}

	@Override
	public void setProductionPlantId(long productionPlantId) {
		_columnBitmask |= PRODUCTIONPLANTID_COLUMN_BITMASK;

		if (!_setOriginalProductionPlantId) {
			_setOriginalProductionPlantId = true;

			_originalProductionPlantId = _productionPlantId;
		}

		_productionPlantId = productionPlantId;
	}

	public long getOriginalProductionPlantId() {
		return _originalProductionPlantId;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_productionPlantCode = productionPlantCode;
	}

	@Override
	public String getProductionPlantName() {
		if (_productionPlantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantName;
		}
	}

	@Override
	public void setProductionPlantName(String productionPlantName) {
		_productionPlantName = productionPlantName;
	}

	@Override
	public String getProductionPlantAddress() {
		if (_productionPlantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantAddress;
		}
	}

	@Override
	public void setProductionPlantAddress(String productionPlantAddress) {
		_productionPlantAddress = productionPlantAddress;
	}

	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@Override
	public String getMethodOfIssue() {
		if (_methodOfIssue == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodOfIssue;
		}
	}

	@Override
	public void setMethodOfIssue(String methodOfIssue) {
		_methodOfIssue = methodOfIssue;
	}

	@Override
	public long getTotalInDocument() {
		return _totalInDocument;
	}

	@Override
	public void setTotalInDocument(long totalInDocument) {
		_totalInDocument = totalInDocument;
	}

	@Override
	public String getIssueCorporationId() {
		if (_issueCorporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueCorporationId;
		}
	}

	@Override
	public void setIssueCorporationId(String issueCorporationId) {
		_columnBitmask |= ISSUECORPORATIONID_COLUMN_BITMASK;

		if (_originalIssueCorporationId == null) {
			_originalIssueCorporationId = _issueCorporationId;
		}

		_issueCorporationId = issueCorporationId;
	}

	public String getOriginalIssueCorporationId() {
		return GetterUtil.getString(_originalIssueCorporationId);
	}

	@Override
	public String getVerifyCorporationId() {
		if (_verifyCorporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _verifyCorporationId;
		}
	}

	@Override
	public void setVerifyCorporationId(String verifyCorporationId) {
		_columnBitmask |= VERIFYCORPORATIONID_COLUMN_BITMASK;

		if (_originalVerifyCorporationId == null) {
			_originalVerifyCorporationId = _verifyCorporationId;
		}

		_verifyCorporationId = verifyCorporationId;
	}

	public String getOriginalVerifyCorporationId() {
		return GetterUtil.getString(_originalVerifyCorporationId);
	}

	@Override
	public String getDigitalissuestatus() {
		if (_digitalissuestatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _digitalissuestatus;
		}
	}

	@Override
	public void setDigitalissuestatus(String digitalissuestatus) {
		_digitalissuestatus = digitalissuestatus;
	}

	@Override
	public String getIssueType() {
		if (_issueType == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueType;
		}
	}

	@Override
	public void setIssueType(String issueType) {
		_issueType = issueType;
	}

	@Override
	public int getAverageSTBQuantity() {
		return _averageSTBQuantity;
	}

	@Override
	public void setAverageSTBQuantity(int averageSTBQuantity) {
		_averageSTBQuantity = averageSTBQuantity;
	}

	@Override
	public int getMaxMonthQuantity() {
		return _maxMonthQuantity;
	}

	@Override
	public void setMaxMonthQuantity(int maxMonthQuantity) {
		_maxMonthQuantity = maxMonthQuantity;
	}

	@Override
	public int getAverageSTMQuantity() {
		return _averageSTMQuantity;
	}

	@Override
	public void setAverageSTMQuantity(int averageSTMQuantity) {
		_averageSTMQuantity = averageSTMQuantity;
	}

	@Override
	public int getAccumulatedMonthQuantity() {
		return _accumulatedMonthQuantity;
	}

	@Override
	public void setAccumulatedMonthQuantity(int accumulatedMonthQuantity) {
		_accumulatedMonthQuantity = accumulatedMonthQuantity;
	}

	@Override
	public int getTotalInUse() {
		return _totalInUse;
	}

	@Override
	public void setTotalInUse(int totalInUse) {
		_totalInUse = totalInUse;
	}

	@Override
	public int getTotalCancelled() {
		return _totalCancelled;
	}

	@Override
	public void setTotalCancelled(int totalCancelled) {
		_totalCancelled = totalCancelled;
	}

	@Override
	public int getTotalLost() {
		return _totalLost;
	}

	@Override
	public void setTotalLost(int totalLost) {
		_totalLost = totalLost;
	}

	@Override
	public int getTotalNotUsed() {
		return _totalNotUsed;
	}

	@Override
	public void setTotalNotUsed(int totalNotUsed) {
		_totalNotUsed = totalNotUsed;
	}

	@Override
	public int getTotalReturned() {
		return _totalReturned;
	}

	@Override
	public void setTotalReturned(int totalReturned) {
		_totalReturned = totalReturned;
	}

	@Override
	public String getFlow() {
		if (_flow == null) {
			return StringPool.BLANK;
		}
		else {
			return _flow;
		}
	}

	@Override
	public void setFlow(String flow) {
		_flow = flow;
	}

	@Override
	public String getExaminationRequired() {
		if (_examinationRequired == null) {
			return StringPool.BLANK;
		}
		else {
			return _examinationRequired;
		}
	}

	@Override
	public void setExaminationRequired(String examinationRequired) {
		_examinationRequired = examinationRequired;
	}

	@Override
	public String getExaminationPeriod() {
		if (_examinationPeriod == null) {
			return StringPool.BLANK;
		}
		else {
			return _examinationPeriod;
		}
	}

	@Override
	public void setExaminationPeriod(String examinationPeriod) {
		_examinationPeriod = examinationPeriod;
	}

	@Override
	public Date getExaminationLastTime() {
		return _examinationLastTime;
	}

	@Override
	public void setExaminationLastTime(Date examinationLastTime) {
		_examinationLastTime = examinationLastTime;
	}

	@Override
	public String getCopresult() {
		if (_copresult == null) {
			return StringPool.BLANK;
		}
		else {
			return _copresult;
		}
	}

	@Override
	public void setCopresult(String copresult) {
		_copresult = copresult;
	}

	@Override
	public String getCopreportno() {
		if (_copreportno == null) {
			return StringPool.BLANK;
		}
		else {
			return _copreportno;
		}
	}

	@Override
	public void setCopreportno(String copreportno) {
		_columnBitmask |= COPREPORTNO_COLUMN_BITMASK;

		if (_originalCopreportno == null) {
			_originalCopreportno = _copreportno;
		}

		_copreportno = copreportno;
	}

	public String getOriginalCopreportno() {
		return GetterUtil.getString(_originalCopreportno);
	}

	@Override
	public Date getCopreportdate() {
		return _copreportdate;
	}

	@Override
	public void setCopreportdate(Date copreportdate) {
		_copreportdate = copreportdate;
	}

	@Override
	public String getPostreview() {
		if (_postreview == null) {
			return StringPool.BLANK;
		}
		else {
			return _postreview;
		}
	}

	@Override
	public void setPostreview(String postreview) {
		_postreview = postreview;
	}

	@Override
	public String getPostreviewrecordno() {
		if (_postreviewrecordno == null) {
			return StringPool.BLANK;
		}
		else {
			return _postreviewrecordno;
		}
	}

	@Override
	public void setPostreviewrecordno(String postreviewrecordno) {
		_postreviewrecordno = postreviewrecordno;
	}

	@Override
	public Date getPostreviewrecorddate() {
		return _postreviewrecorddate;
	}

	@Override
	public void setPostreviewrecorddate(Date postreviewrecorddate) {
		_postreviewrecorddate = postreviewrecorddate;
	}

	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (_originalCorporationId == null) {
			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public String getOriginalCorporationId() {
		return GetterUtil.getString(_originalCorporationId);
	}

	@Override
	public String getInspectorcode() {
		if (_inspectorcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorcode;
		}
	}

	@Override
	public void setInspectorcode(String inspectorcode) {
		_inspectorcode = inspectorcode;
	}

	@Override
	public String getInspectorname() {
		if (_inspectorname == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorname;
		}
	}

	@Override
	public void setInspectorname(String inspectorname) {
		_inspectorname = inspectorname;
	}

	@Override
	public String getLeadername() {
		if (_leadername == null) {
			return StringPool.BLANK;
		}
		else {
			return _leadername;
		}
	}

	@Override
	public void setLeadername(String leadername) {
		_leadername = leadername;
	}

	@Override
	public String getApplicantmaker() {
		if (_applicantmaker == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantmaker;
		}
	}

	@Override
	public void setApplicantmaker(String applicantmaker) {
		_applicantmaker = applicantmaker;
	}

	@Override
	public String getApplicantchecker() {
		if (_applicantchecker == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantchecker;
		}
	}

	@Override
	public void setApplicantchecker(String applicantchecker) {
		_applicantchecker = applicantchecker;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRIssue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRIssue toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRIssue)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRIssueImpl vrIssueImpl = new VRIssueImpl();

		vrIssueImpl.setId(getId());
		vrIssueImpl.setMtCore(getMtCore());
		vrIssueImpl.setDossierId(getDossierId());
		vrIssueImpl.setStampIssueNo(getStampIssueNo());
		vrIssueImpl.setAppliedDate(getAppliedDate());
		vrIssueImpl.setApprovedDate(getApprovedDate());
		vrIssueImpl.setVehicleClass(getVehicleClass());
		vrIssueImpl.setApplicantProfileId(getApplicantProfileId());
		vrIssueImpl.setApplicantName(getApplicantName());
		vrIssueImpl.setApplicantAddress(getApplicantAddress());
		vrIssueImpl.setApplicantRepresentative(getApplicantRepresentative());
		vrIssueImpl.setApplicantRepresentativeTitle(getApplicantRepresentativeTitle());
		vrIssueImpl.setApplicantEmail(getApplicantEmail());
		vrIssueImpl.setApplicantPhone(getApplicantPhone());
		vrIssueImpl.setApplicantFax(getApplicantFax());
		vrIssueImpl.setApplicantContactName(getApplicantContactName());
		vrIssueImpl.setApplicantContactEmail(getApplicantContactEmail());
		vrIssueImpl.setApplicantContactPhone(getApplicantContactPhone());
		vrIssueImpl.setProductionPlantId(getProductionPlantId());
		vrIssueImpl.setProductionPlantCode(getProductionPlantCode());
		vrIssueImpl.setProductionPlantName(getProductionPlantName());
		vrIssueImpl.setProductionPlantAddress(getProductionPlantAddress());
		vrIssueImpl.setRemarks(getRemarks());
		vrIssueImpl.setMethodOfIssue(getMethodOfIssue());
		vrIssueImpl.setTotalInDocument(getTotalInDocument());
		vrIssueImpl.setIssueCorporationId(getIssueCorporationId());
		vrIssueImpl.setVerifyCorporationId(getVerifyCorporationId());
		vrIssueImpl.setDigitalissuestatus(getDigitalissuestatus());
		vrIssueImpl.setIssueType(getIssueType());
		vrIssueImpl.setAverageSTBQuantity(getAverageSTBQuantity());
		vrIssueImpl.setMaxMonthQuantity(getMaxMonthQuantity());
		vrIssueImpl.setAverageSTMQuantity(getAverageSTMQuantity());
		vrIssueImpl.setAccumulatedMonthQuantity(getAccumulatedMonthQuantity());
		vrIssueImpl.setTotalInUse(getTotalInUse());
		vrIssueImpl.setTotalCancelled(getTotalCancelled());
		vrIssueImpl.setTotalLost(getTotalLost());
		vrIssueImpl.setTotalNotUsed(getTotalNotUsed());
		vrIssueImpl.setTotalReturned(getTotalReturned());
		vrIssueImpl.setFlow(getFlow());
		vrIssueImpl.setExaminationRequired(getExaminationRequired());
		vrIssueImpl.setExaminationPeriod(getExaminationPeriod());
		vrIssueImpl.setExaminationLastTime(getExaminationLastTime());
		vrIssueImpl.setCopresult(getCopresult());
		vrIssueImpl.setCopreportno(getCopreportno());
		vrIssueImpl.setCopreportdate(getCopreportdate());
		vrIssueImpl.setPostreview(getPostreview());
		vrIssueImpl.setPostreviewrecordno(getPostreviewrecordno());
		vrIssueImpl.setPostreviewrecorddate(getPostreviewrecorddate());
		vrIssueImpl.setCorporationId(getCorporationId());
		vrIssueImpl.setInspectorcode(getInspectorcode());
		vrIssueImpl.setInspectorname(getInspectorname());
		vrIssueImpl.setLeadername(getLeadername());
		vrIssueImpl.setApplicantmaker(getApplicantmaker());
		vrIssueImpl.setApplicantchecker(getApplicantchecker());
		vrIssueImpl.setModifyDate(getModifyDate());
		vrIssueImpl.setSyncDate(getSyncDate());

		vrIssueImpl.resetOriginalValues();

		return vrIssueImpl;
	}

	@Override
	public int compareTo(VRIssue vrIssue) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(), vrIssue.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRIssue)) {
			return false;
		}

		VRIssue vrIssue = (VRIssue)obj;

		long primaryKey = vrIssue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRIssueModelImpl vrIssueModelImpl = this;

		vrIssueModelImpl._originalMtCore = vrIssueModelImpl._mtCore;

		vrIssueModelImpl._setOriginalMtCore = false;

		vrIssueModelImpl._originalDossierId = vrIssueModelImpl._dossierId;

		vrIssueModelImpl._setOriginalDossierId = false;

		vrIssueModelImpl._originalStampIssueNo = vrIssueModelImpl._stampIssueNo;

		vrIssueModelImpl._originalApplicantProfileId = vrIssueModelImpl._applicantProfileId;

		vrIssueModelImpl._setOriginalApplicantProfileId = false;

		vrIssueModelImpl._originalProductionPlantId = vrIssueModelImpl._productionPlantId;

		vrIssueModelImpl._setOriginalProductionPlantId = false;

		vrIssueModelImpl._originalIssueCorporationId = vrIssueModelImpl._issueCorporationId;

		vrIssueModelImpl._originalVerifyCorporationId = vrIssueModelImpl._verifyCorporationId;

		vrIssueModelImpl._originalCopreportno = vrIssueModelImpl._copreportno;

		vrIssueModelImpl._originalCorporationId = vrIssueModelImpl._corporationId;

		vrIssueModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRIssue> toCacheModel() {
		VRIssueCacheModel vrIssueCacheModel = new VRIssueCacheModel();

		vrIssueCacheModel.id = getId();

		vrIssueCacheModel.mtCore = getMtCore();

		vrIssueCacheModel.dossierId = getDossierId();

		vrIssueCacheModel.stampIssueNo = getStampIssueNo();

		String stampIssueNo = vrIssueCacheModel.stampIssueNo;

		if ((stampIssueNo != null) && (stampIssueNo.length() == 0)) {
			vrIssueCacheModel.stampIssueNo = null;
		}

		Date appliedDate = getAppliedDate();

		if (appliedDate != null) {
			vrIssueCacheModel.appliedDate = appliedDate.getTime();
		}
		else {
			vrIssueCacheModel.appliedDate = Long.MIN_VALUE;
		}

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			vrIssueCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			vrIssueCacheModel.approvedDate = Long.MIN_VALUE;
		}

		vrIssueCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = vrIssueCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			vrIssueCacheModel.vehicleClass = null;
		}

		vrIssueCacheModel.applicantProfileId = getApplicantProfileId();

		vrIssueCacheModel.applicantName = getApplicantName();

		String applicantName = vrIssueCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrIssueCacheModel.applicantName = null;
		}

		vrIssueCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrIssueCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrIssueCacheModel.applicantAddress = null;
		}

		vrIssueCacheModel.applicantRepresentative = getApplicantRepresentative();

		String applicantRepresentative = vrIssueCacheModel.applicantRepresentative;

		if ((applicantRepresentative != null) &&
				(applicantRepresentative.length() == 0)) {
			vrIssueCacheModel.applicantRepresentative = null;
		}

		vrIssueCacheModel.applicantRepresentativeTitle = getApplicantRepresentativeTitle();

		String applicantRepresentativeTitle = vrIssueCacheModel.applicantRepresentativeTitle;

		if ((applicantRepresentativeTitle != null) &&
				(applicantRepresentativeTitle.length() == 0)) {
			vrIssueCacheModel.applicantRepresentativeTitle = null;
		}

		vrIssueCacheModel.applicantEmail = getApplicantEmail();

		String applicantEmail = vrIssueCacheModel.applicantEmail;

		if ((applicantEmail != null) && (applicantEmail.length() == 0)) {
			vrIssueCacheModel.applicantEmail = null;
		}

		vrIssueCacheModel.applicantPhone = getApplicantPhone();

		String applicantPhone = vrIssueCacheModel.applicantPhone;

		if ((applicantPhone != null) && (applicantPhone.length() == 0)) {
			vrIssueCacheModel.applicantPhone = null;
		}

		vrIssueCacheModel.applicantFax = getApplicantFax();

		String applicantFax = vrIssueCacheModel.applicantFax;

		if ((applicantFax != null) && (applicantFax.length() == 0)) {
			vrIssueCacheModel.applicantFax = null;
		}

		vrIssueCacheModel.applicantContactName = getApplicantContactName();

		String applicantContactName = vrIssueCacheModel.applicantContactName;

		if ((applicantContactName != null) &&
				(applicantContactName.length() == 0)) {
			vrIssueCacheModel.applicantContactName = null;
		}

		vrIssueCacheModel.applicantContactEmail = getApplicantContactEmail();

		String applicantContactEmail = vrIssueCacheModel.applicantContactEmail;

		if ((applicantContactEmail != null) &&
				(applicantContactEmail.length() == 0)) {
			vrIssueCacheModel.applicantContactEmail = null;
		}

		vrIssueCacheModel.applicantContactPhone = getApplicantContactPhone();

		String applicantContactPhone = vrIssueCacheModel.applicantContactPhone;

		if ((applicantContactPhone != null) &&
				(applicantContactPhone.length() == 0)) {
			vrIssueCacheModel.applicantContactPhone = null;
		}

		vrIssueCacheModel.productionPlantId = getProductionPlantId();

		vrIssueCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrIssueCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrIssueCacheModel.productionPlantCode = null;
		}

		vrIssueCacheModel.productionPlantName = getProductionPlantName();

		String productionPlantName = vrIssueCacheModel.productionPlantName;

		if ((productionPlantName != null) &&
				(productionPlantName.length() == 0)) {
			vrIssueCacheModel.productionPlantName = null;
		}

		vrIssueCacheModel.productionPlantAddress = getProductionPlantAddress();

		String productionPlantAddress = vrIssueCacheModel.productionPlantAddress;

		if ((productionPlantAddress != null) &&
				(productionPlantAddress.length() == 0)) {
			vrIssueCacheModel.productionPlantAddress = null;
		}

		vrIssueCacheModel.remarks = getRemarks();

		String remarks = vrIssueCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			vrIssueCacheModel.remarks = null;
		}

		vrIssueCacheModel.methodOfIssue = getMethodOfIssue();

		String methodOfIssue = vrIssueCacheModel.methodOfIssue;

		if ((methodOfIssue != null) && (methodOfIssue.length() == 0)) {
			vrIssueCacheModel.methodOfIssue = null;
		}

		vrIssueCacheModel.totalInDocument = getTotalInDocument();

		vrIssueCacheModel.issueCorporationId = getIssueCorporationId();

		String issueCorporationId = vrIssueCacheModel.issueCorporationId;

		if ((issueCorporationId != null) && (issueCorporationId.length() == 0)) {
			vrIssueCacheModel.issueCorporationId = null;
		}

		vrIssueCacheModel.verifyCorporationId = getVerifyCorporationId();

		String verifyCorporationId = vrIssueCacheModel.verifyCorporationId;

		if ((verifyCorporationId != null) &&
				(verifyCorporationId.length() == 0)) {
			vrIssueCacheModel.verifyCorporationId = null;
		}

		vrIssueCacheModel.digitalissuestatus = getDigitalissuestatus();

		String digitalissuestatus = vrIssueCacheModel.digitalissuestatus;

		if ((digitalissuestatus != null) && (digitalissuestatus.length() == 0)) {
			vrIssueCacheModel.digitalissuestatus = null;
		}

		vrIssueCacheModel.issueType = getIssueType();

		String issueType = vrIssueCacheModel.issueType;

		if ((issueType != null) && (issueType.length() == 0)) {
			vrIssueCacheModel.issueType = null;
		}

		vrIssueCacheModel.averageSTBQuantity = getAverageSTBQuantity();

		vrIssueCacheModel.maxMonthQuantity = getMaxMonthQuantity();

		vrIssueCacheModel.averageSTMQuantity = getAverageSTMQuantity();

		vrIssueCacheModel.accumulatedMonthQuantity = getAccumulatedMonthQuantity();

		vrIssueCacheModel.totalInUse = getTotalInUse();

		vrIssueCacheModel.totalCancelled = getTotalCancelled();

		vrIssueCacheModel.totalLost = getTotalLost();

		vrIssueCacheModel.totalNotUsed = getTotalNotUsed();

		vrIssueCacheModel.totalReturned = getTotalReturned();

		vrIssueCacheModel.flow = getFlow();

		String flow = vrIssueCacheModel.flow;

		if ((flow != null) && (flow.length() == 0)) {
			vrIssueCacheModel.flow = null;
		}

		vrIssueCacheModel.examinationRequired = getExaminationRequired();

		String examinationRequired = vrIssueCacheModel.examinationRequired;

		if ((examinationRequired != null) &&
				(examinationRequired.length() == 0)) {
			vrIssueCacheModel.examinationRequired = null;
		}

		vrIssueCacheModel.examinationPeriod = getExaminationPeriod();

		String examinationPeriod = vrIssueCacheModel.examinationPeriod;

		if ((examinationPeriod != null) && (examinationPeriod.length() == 0)) {
			vrIssueCacheModel.examinationPeriod = null;
		}

		Date examinationLastTime = getExaminationLastTime();

		if (examinationLastTime != null) {
			vrIssueCacheModel.examinationLastTime = examinationLastTime.getTime();
		}
		else {
			vrIssueCacheModel.examinationLastTime = Long.MIN_VALUE;
		}

		vrIssueCacheModel.copresult = getCopresult();

		String copresult = vrIssueCacheModel.copresult;

		if ((copresult != null) && (copresult.length() == 0)) {
			vrIssueCacheModel.copresult = null;
		}

		vrIssueCacheModel.copreportno = getCopreportno();

		String copreportno = vrIssueCacheModel.copreportno;

		if ((copreportno != null) && (copreportno.length() == 0)) {
			vrIssueCacheModel.copreportno = null;
		}

		Date copreportdate = getCopreportdate();

		if (copreportdate != null) {
			vrIssueCacheModel.copreportdate = copreportdate.getTime();
		}
		else {
			vrIssueCacheModel.copreportdate = Long.MIN_VALUE;
		}

		vrIssueCacheModel.postreview = getPostreview();

		String postreview = vrIssueCacheModel.postreview;

		if ((postreview != null) && (postreview.length() == 0)) {
			vrIssueCacheModel.postreview = null;
		}

		vrIssueCacheModel.postreviewrecordno = getPostreviewrecordno();

		String postreviewrecordno = vrIssueCacheModel.postreviewrecordno;

		if ((postreviewrecordno != null) && (postreviewrecordno.length() == 0)) {
			vrIssueCacheModel.postreviewrecordno = null;
		}

		Date postreviewrecorddate = getPostreviewrecorddate();

		if (postreviewrecorddate != null) {
			vrIssueCacheModel.postreviewrecorddate = postreviewrecorddate.getTime();
		}
		else {
			vrIssueCacheModel.postreviewrecorddate = Long.MIN_VALUE;
		}

		vrIssueCacheModel.corporationId = getCorporationId();

		String corporationId = vrIssueCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			vrIssueCacheModel.corporationId = null;
		}

		vrIssueCacheModel.inspectorcode = getInspectorcode();

		String inspectorcode = vrIssueCacheModel.inspectorcode;

		if ((inspectorcode != null) && (inspectorcode.length() == 0)) {
			vrIssueCacheModel.inspectorcode = null;
		}

		vrIssueCacheModel.inspectorname = getInspectorname();

		String inspectorname = vrIssueCacheModel.inspectorname;

		if ((inspectorname != null) && (inspectorname.length() == 0)) {
			vrIssueCacheModel.inspectorname = null;
		}

		vrIssueCacheModel.leadername = getLeadername();

		String leadername = vrIssueCacheModel.leadername;

		if ((leadername != null) && (leadername.length() == 0)) {
			vrIssueCacheModel.leadername = null;
		}

		vrIssueCacheModel.applicantmaker = getApplicantmaker();

		String applicantmaker = vrIssueCacheModel.applicantmaker;

		if ((applicantmaker != null) && (applicantmaker.length() == 0)) {
			vrIssueCacheModel.applicantmaker = null;
		}

		vrIssueCacheModel.applicantchecker = getApplicantchecker();

		String applicantchecker = vrIssueCacheModel.applicantchecker;

		if ((applicantchecker != null) && (applicantchecker.length() == 0)) {
			vrIssueCacheModel.applicantchecker = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrIssueCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrIssueCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrIssueCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrIssueCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrIssueCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(113);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", stampIssueNo=");
		sb.append(getStampIssueNo());
		sb.append(", appliedDate=");
		sb.append(getAppliedDate());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", applicantProfileId=");
		sb.append(getApplicantProfileId());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", applicantRepresentative=");
		sb.append(getApplicantRepresentative());
		sb.append(", applicantRepresentativeTitle=");
		sb.append(getApplicantRepresentativeTitle());
		sb.append(", applicantEmail=");
		sb.append(getApplicantEmail());
		sb.append(", applicantPhone=");
		sb.append(getApplicantPhone());
		sb.append(", applicantFax=");
		sb.append(getApplicantFax());
		sb.append(", applicantContactName=");
		sb.append(getApplicantContactName());
		sb.append(", applicantContactEmail=");
		sb.append(getApplicantContactEmail());
		sb.append(", applicantContactPhone=");
		sb.append(getApplicantContactPhone());
		sb.append(", productionPlantId=");
		sb.append(getProductionPlantId());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append(", productionPlantName=");
		sb.append(getProductionPlantName());
		sb.append(", productionPlantAddress=");
		sb.append(getProductionPlantAddress());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", methodOfIssue=");
		sb.append(getMethodOfIssue());
		sb.append(", totalInDocument=");
		sb.append(getTotalInDocument());
		sb.append(", issueCorporationId=");
		sb.append(getIssueCorporationId());
		sb.append(", verifyCorporationId=");
		sb.append(getVerifyCorporationId());
		sb.append(", digitalissuestatus=");
		sb.append(getDigitalissuestatus());
		sb.append(", issueType=");
		sb.append(getIssueType());
		sb.append(", averageSTBQuantity=");
		sb.append(getAverageSTBQuantity());
		sb.append(", maxMonthQuantity=");
		sb.append(getMaxMonthQuantity());
		sb.append(", averageSTMQuantity=");
		sb.append(getAverageSTMQuantity());
		sb.append(", accumulatedMonthQuantity=");
		sb.append(getAccumulatedMonthQuantity());
		sb.append(", totalInUse=");
		sb.append(getTotalInUse());
		sb.append(", totalCancelled=");
		sb.append(getTotalCancelled());
		sb.append(", totalLost=");
		sb.append(getTotalLost());
		sb.append(", totalNotUsed=");
		sb.append(getTotalNotUsed());
		sb.append(", totalReturned=");
		sb.append(getTotalReturned());
		sb.append(", flow=");
		sb.append(getFlow());
		sb.append(", examinationRequired=");
		sb.append(getExaminationRequired());
		sb.append(", examinationPeriod=");
		sb.append(getExaminationPeriod());
		sb.append(", examinationLastTime=");
		sb.append(getExaminationLastTime());
		sb.append(", copresult=");
		sb.append(getCopresult());
		sb.append(", copreportno=");
		sb.append(getCopreportno());
		sb.append(", copreportdate=");
		sb.append(getCopreportdate());
		sb.append(", postreview=");
		sb.append(getPostreview());
		sb.append(", postreviewrecordno=");
		sb.append(getPostreviewrecordno());
		sb.append(", postreviewrecorddate=");
		sb.append(getPostreviewrecorddate());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorcode=");
		sb.append(getInspectorcode());
		sb.append(", inspectorname=");
		sb.append(getInspectorname());
		sb.append(", leadername=");
		sb.append(getLeadername());
		sb.append(", applicantmaker=");
		sb.append(getApplicantmaker());
		sb.append(", applicantchecker=");
		sb.append(getApplicantchecker());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(172);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRIssue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampIssueNo</column-name><column-value><![CDATA[");
		sb.append(getStampIssueNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appliedDate</column-name><column-value><![CDATA[");
		sb.append(getAppliedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantProfileId</column-name><column-value><![CDATA[");
		sb.append(getApplicantProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentative</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantFax</column-name><column-value><![CDATA[");
		sb.append(getApplicantFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactName</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactPhone</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantName</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantAddress</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodOfIssue</column-name><column-value><![CDATA[");
		sb.append(getMethodOfIssue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalInDocument</column-name><column-value><![CDATA[");
		sb.append(getTotalInDocument());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueCorporationId</column-name><column-value><![CDATA[");
		sb.append(getIssueCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verifyCorporationId</column-name><column-value><![CDATA[");
		sb.append(getVerifyCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>digitalissuestatus</column-name><column-value><![CDATA[");
		sb.append(getDigitalissuestatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueType</column-name><column-value><![CDATA[");
		sb.append(getIssueType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>averageSTBQuantity</column-name><column-value><![CDATA[");
		sb.append(getAverageSTBQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxMonthQuantity</column-name><column-value><![CDATA[");
		sb.append(getMaxMonthQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>averageSTMQuantity</column-name><column-value><![CDATA[");
		sb.append(getAverageSTMQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accumulatedMonthQuantity</column-name><column-value><![CDATA[");
		sb.append(getAccumulatedMonthQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalInUse</column-name><column-value><![CDATA[");
		sb.append(getTotalInUse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCancelled</column-name><column-value><![CDATA[");
		sb.append(getTotalCancelled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalLost</column-name><column-value><![CDATA[");
		sb.append(getTotalLost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalNotUsed</column-name><column-value><![CDATA[");
		sb.append(getTotalNotUsed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalReturned</column-name><column-value><![CDATA[");
		sb.append(getTotalReturned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flow</column-name><column-value><![CDATA[");
		sb.append(getFlow());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>examinationRequired</column-name><column-value><![CDATA[");
		sb.append(getExaminationRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>examinationPeriod</column-name><column-value><![CDATA[");
		sb.append(getExaminationPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>examinationLastTime</column-name><column-value><![CDATA[");
		sb.append(getExaminationLastTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copresult</column-name><column-value><![CDATA[");
		sb.append(getCopresult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copreportno</column-name><column-value><![CDATA[");
		sb.append(getCopreportno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copreportdate</column-name><column-value><![CDATA[");
		sb.append(getCopreportdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postreview</column-name><column-value><![CDATA[");
		sb.append(getPostreview());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postreviewrecordno</column-name><column-value><![CDATA[");
		sb.append(getPostreviewrecordno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postreviewrecorddate</column-name><column-value><![CDATA[");
		sb.append(getPostreviewrecorddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorcode</column-name><column-value><![CDATA[");
		sb.append(getInspectorcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorname</column-name><column-value><![CDATA[");
		sb.append(getInspectorname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leadername</column-name><column-value><![CDATA[");
		sb.append(getLeadername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantmaker</column-name><column-value><![CDATA[");
		sb.append(getApplicantmaker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantchecker</column-name><column-value><![CDATA[");
		sb.append(getApplicantchecker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRIssue.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRIssue.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _stampIssueNo;
	private String _originalStampIssueNo;
	private Date _appliedDate;
	private Date _approvedDate;
	private String _vehicleClass;
	private long _applicantProfileId;
	private long _originalApplicantProfileId;
	private boolean _setOriginalApplicantProfileId;
	private String _applicantName;
	private String _applicantAddress;
	private String _applicantRepresentative;
	private String _applicantRepresentativeTitle;
	private String _applicantEmail;
	private String _applicantPhone;
	private String _applicantFax;
	private String _applicantContactName;
	private String _applicantContactEmail;
	private String _applicantContactPhone;
	private long _productionPlantId;
	private long _originalProductionPlantId;
	private boolean _setOriginalProductionPlantId;
	private String _productionPlantCode;
	private String _productionPlantName;
	private String _productionPlantAddress;
	private String _remarks;
	private String _methodOfIssue;
	private long _totalInDocument;
	private String _issueCorporationId;
	private String _originalIssueCorporationId;
	private String _verifyCorporationId;
	private String _originalVerifyCorporationId;
	private String _digitalissuestatus;
	private String _issueType;
	private int _averageSTBQuantity;
	private int _maxMonthQuantity;
	private int _averageSTMQuantity;
	private int _accumulatedMonthQuantity;
	private int _totalInUse;
	private int _totalCancelled;
	private int _totalLost;
	private int _totalNotUsed;
	private int _totalReturned;
	private String _flow;
	private String _examinationRequired;
	private String _examinationPeriod;
	private Date _examinationLastTime;
	private String _copresult;
	private String _copreportno;
	private String _originalCopreportno;
	private Date _copreportdate;
	private String _postreview;
	private String _postreviewrecordno;
	private Date _postreviewrecorddate;
	private String _corporationId;
	private String _originalCorporationId;
	private String _inspectorcode;
	private String _inspectorname;
	private String _leadername;
	private String _applicantmaker;
	private String _applicantchecker;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRIssue _escapedModel;
}